apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "hdfs-k8s.config.fullname" . }}
  labels:
    app: {{ template "hdfs-k8s.client.name" . }}
    chart: {{ template "hdfs-k8s.subchart" . }}
    release: {{ .Release.Name }}
data:
  hadoop-env.sh: |
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # Set Hadoop-specific environment variables here.

    # The only required environment variable is JAVA_HOME.  All others are
    # optional.  When running a distributed configuration it is best to
    # set JAVA_HOME in this file, so that it is correctly defined on
    # remote nodes.

    # The java implementation to use.
    export JAVA_HOME=${JAVA_HOME}

    # The jsvc implementation to use. Jsvc is required to run secure datanodes
    # that bind to privileged ports to provide authentication of data transfer
    # protocol.  Jsvc is not required if SASL is configured for authentication of
    # data transfer protocol using non-privileged ports.
    #export JSVC_HOME=${JSVC_HOME}

    export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-"/opt/hadoop/etc/hadoop"}
    export HADOOP_ROOT_LOGGER=INFO,DRFA,console
    export HADOOP_MAPRED_ROOT_LOGGER=INFO,DRFA,console
    export HDFS_AUDIT_LOGGER=INFO,DRFA,console
    export HADOOP_SECURITY_LOGGER=INFO,DRFA,console
    # export HADOOP_HEAPSIZE=4096
    export HADOOP_HEAPSIZE=${HADOOP_HEAPSIZE:-512}

    # Extra Java CLASSPATH elements.  Automatically insert capacity-scheduler.
    for f in $HADOOP_HOME/contrib/capacity-scheduler/*.jar; do
      if [ "$HADOOP_CLASSPATH" ]; then
        export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:$f
      else
        export HADOOP_CLASSPATH=$f
      fi
    done

    # The maximum amount of heap to use, in MB. Default is 1000.
    #export HADOOP_HEAPSIZE=
    #export HADOOP_NAMENODE_INIT_HEAPSIZE=""

    # Enable extra debugging of Hadoop's JAAS binding, used to set up
    # Kerberos security.
    # export HADOOP_JAAS_DEBUG=true

    # Extra Java runtime options.  Empty by default.
    # For Kerberos debugging, an extended option set logs more invormation
    # export HADOOP_OPTS="-Djava.net.preferIPv4Stack=true -Dsun.security.krb5.debug=true -Dsun.security.spnego.debug"
    export HADOOP_OPTS="$HADOOP_OPTS -Djava.net.preferIPv4Stack=true"

    # Command specific options appended to HADOOP_OPTS when specified
    export HADOOP_NAMENODE_OPTS="-XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:GCPauseIntervalMillis=100 -Dhadoop.security.logger=${HADOOP_SECURITY_LOGGER:-INFO,RFAS} -Dhdfs.audit.logger=${HDFS_AUDIT_LOGGER:-INFO,NullAppender} $HADOOP_NAMENODE_OPTS"
    export HADOOP_DATANODE_OPTS="-XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:GCPauseIntervalMillis=100 -Dhadoop.security.logger=ERROR,RFAS $HADOOP_DATANODE_OPTS"

    export HADOOP_SECONDARYNAMENODE_OPTS="-Dhadoop.security.logger=${HADOOP_SECURITY_LOGGER:-INFO,RFAS} -Dhdfs.audit.logger=${HDFS_AUDIT_LOGGER:-INFO,NullAppender} $HADOOP_SECONDARYNAMENODE_OPTS"

    export HADOOP_NFS3_OPTS="$HADOOP_NFS3_OPTS"
    export HADOOP_PORTMAP_OPTS="-Xmx2048m $HADOOP_PORTMAP_OPTS"

    # The following applies to multiple commands (fs, dfs, fsck, distcp etc)
    export HADOOP_CLIENT_OPTS="$HADOOP_CLIENT_OPTS"
    # set heap args when HADOOP_HEAPSIZE is empty
    if [ "$HADOOP_HEAPSIZE" = "" ]; then
      export HADOOP_CLIENT_OPTS="-Xmx2048m $HADOOP_CLIENT_OPTS"
    fi
    #HADOOP_JAVA_PLATFORM_OPTS="-XX:-UsePerfData $HADOOP_JAVA_PLATFORM_OPTS"

    # On secure datanodes, user to run the datanode as after dropping privileges.
    # This **MUST** be uncommented to enable secure HDFS if using privileged ports
    # to provide authentication of data transfer protocol.  This **MUST NOT** be
    # defined if SASL is configured for authentication of data transfer protocol
    # using non-privileged ports.
    export HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER}

    # Where log files are stored.  $HADOOP_HOME/logs by default.
    #export HADOOP_LOG_DIR=${HADOOP_LOG_DIR}/$USER

    # Where log files are stored in the secure data environment.
    #export HADOOP_SECURE_DN_LOG_DIR=${HADOOP_LOG_DIR}/${HADOOP_HDFS_USER}

    ###
    # HDFS Mover specific parameters
    ###
    # Specify the JVM options to be used when starting the HDFS Mover.
    # These options will be appended to the options specified as HADOOP_OPTS
    # and therefore may override any similar flags set in HADOOP_OPTS
    #
    # export HADOOP_MOVER_OPTS=""

    ###
    # Advanced Users Only!
    ###

    # The directory where pid files are stored. /tmp by default.
    # NOTE: this should be set to a directory that can only be written to by
    #       the user that will run the hadoop daemons.  Otherwise there is the
    #       potential for a symlink attack.
    export HADOOP_PID_DIR=${HADOOP_PID_DIR}
    export HADOOP_SECURE_DN_PID_DIR=${HADOOP_PID_DIR}

    export HADOOP_JOURNALNODE_OPTS="$HADOOP_JOURNALNODE_OPTS -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:GCPauseIntervalMillis=100 -Dhadoop.security.logger=INFO,DRFA,console -Dhdfs.audit.logger=INFO,DRFA,console"

    # A string representing this instance of hadoop. $USER by default.
    export HADOOP_IDENT_STRING=$USER
    {{- if .Values.global.metrics.enabled }}
    export HADOOP_NAMENODE_OPTS="$HADOOP_NAMENODE_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port={{ .Values.global.namenodeJmxPort }}"
    export HADOOP_DATANODE_OPTS="$HADOOP_DATANODE_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port={{ .Values.global.datanodeJmxPort }}"
    export HADOOP_JOURNALNODE_OPTS="$HADOOP_JOURNALNODE_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port={{ .Values.global.journalJmxPort }}"
    {{- end }}


  core-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    {{- if .Values.global.kerberosEnabled }}
      <property>
        <name>hadoop.security.authentication</name>
        <value>kerberos</value>
      </property>
      <!--
      This is service level RPC authorization, which is separate from HDFS file
      level ACLs.  This concerns who can talk to HDFS daemons including
      datanodes talking to namenode.  As part of the authorization, namenode
      tries to validate that DNS can uniquely traslate the datanode IP to the
      hostname in the datanode Kerberos principal.  (i.e. The client IP is what
      Kerberos has authenticated). This does not work well when both namenode
      and datanodes are using the Kubernetes HostNetwork and namenode is using
      the StatefulSet. The same cluster node IP can be mapped to two different
      DNS names. So we disable this. Again this is only service level RPC
      authorization and does not affect HDFS file level permission ACLs.
      -->
      <property>
        <name>hadoop.security.authorization</name>
        <value>false</value>
      </property>
      <property>
        <name>hadoop.rpc.protection</name>
        <value>privacy</value>
      </property>
      <property>
        <name>hadoop.user.group.static.mapping.overrides</name>
        <value>hdfs=root;</value>
      </property>
    {{- end }}
    {{- range $key, $value := .Values.customHadoopConfig.coreSite }}
      <property>
        <name>{{ $key }}</name>
        <value>{{ $value }}</value>
      </property>
    {{- end }}
    {{- if .Values.global.namenodeHAEnabled }}
      <property>
        <name>fs.defaultFS</name>
        <value>hdfs://{{ include "hadoop.fullname" . }}-hdfs-nn</value>
      </property>
      <property>
        <name>ha.zookeeper.quorum</name>
        <value>{{ template "zookeeper-quorum" . }}</value>
      </property>
    {{- else }}
      <property>
        <name>fs.defaultFS</name>
        <value>hdfs://{{ template "namenode-svc-0" . }}:8020</value>
      </property>
    {{- end }}

      <property>
        <name>hadoop.logfile.size</name>
        <value>1000000000</value>
      </property>
      <property>
        <name>hadoop.logfile.count</name>
        <value>20</value>
      </property>

      {{- if .Values.global.enableProxyUserRoot }}
      <property>
          <name>hadoop.proxyuser.root.hosts</name>
          <value>*</value>
      </property>
      <property>
          <name>hadoop.proxyuser.root.groups</name>
          <value>*</value>
      </property>
      {{- end }}

    </configuration>

  hive-site.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

    <configuration>
      <property>
         <name>hive.metastore.warehouse.dir</name>
         <value>hdfs://{{ .Release.Name }}-hadoop-hdfs-nn/user/hive/warehouse/</value>
      </property>
    </configuration>

  hdfs-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    {{- if .Values.global.kerberosEnabled }}
      <property>
        <name>dfs.block.access.token.enable</name>
        <value>true</value>
      </property>
      <property>
        <name>dfs.encrypt.data.transfer</name>
        <value>true</value>
      </property>
      <property>
        <name>dfs.namenode.kerberos.principal</name>
        <value>{{ template "hdfs-principal" . }}</value>
      </property>
      {{/*
      TODO: Check if the https principal is no longer needed in newer Hadoop version.
      */}}
      <property>
        <name>dfs.namenode.kerberos.https.principal</name>
        <value>{{ template "http-principal" . }}</value>
      </property>
      <property>
        <name>dfs.web.authentication.kerberos.principal</name>
        <value>{{ template "http-principal" . }}</value>
      </property>
      <property>
        <name>dfs.namenode.keytab.file</name>
        <value>/etc/security/hdfs.keytab</value>
      </property>
      <property>
        <name>dfs.journalnode.kerberos.principal</name>
        <value>{{ template "hdfs-principal" . }}</value>
      </property>
      <property>
        <name>dfs.journalnode.kerberos.internal.spnego.principal</name>
        <value>{{ template "http-principal" . }}</value>
      </property>
      <property>
        <name>dfs.journalnode.keytab.file</name>
        <value>/etc/security/hdfs.keytab</value>
      </property>
      <property>
        <name>dfs.datanode.kerberos.principal</name>
        <value>{{ template "hdfs-principal" . }}</value>
      </property>
      <property>
        <name>dfs.datanode.kerberos.https.principal</name>
        <value>{{ template "http-principal" . }}</value>
      </property>
      <property>
        <name>dfs.datanode.keytab.file</name>
        <value>/etc/security/hdfs.keytab</value>
      </property>
      {{- if .Values.global.jsvcEnabled }}
      <property>
        <name>dfs.datanode.address</name>
        <value>0.0.0.0:1004</value>
      </property>
      <property>
        <name>dfs.datanode.http.address</name>
        <value>0.0.0.0:1006</value>
      </property>
      {{- end }}
    {{- end }}
    {{- range $key, $value := .Values.customHadoopConfig.hdfsSite }}
      <property>
        <name>{{ $key }}</name>
        <value>{{ $value }}</value>
      </property>
    {{- end }}
    {{- if .Values.global.enableNeverReplaceDatanode }}
      <property>
        <name>dfs.client.block.write.replace-datanode-on-failure.enable</name>
        <value>true</value>
      </property>
      <property>
        <name>dfs.client.block.write.replace-datanode-on-failure.policy</name>
        <value>NEVER</value>
      </property>
    {{- end }}
    {{- if .Values.global.namenodeHAEnabled }}
      <property>
        <name>dfs.nameservices</name>
        <value>{{ include "hadoop.fullname" . }}-hdfs-nn</value>
      </property>
      <property>
        <name>dfs.ha.namenodes.{{ include "hadoop.fullname" . }}-hdfs-nn</name>
        <value>nn0,nn1</value>
      </property>
      <property>
        <name>dfs.namenode.rpc-address.{{ include "hadoop.fullname" . }}-hdfs-nn.nn0</name>
        <value>{{ template "namenode-svc-0" . }}:8020</value>
      </property>
      <property>
        <name>dfs.namenode.rpc-address.{{ include "hadoop.fullname" . }}-hdfs-nn.nn1</name>
        <value>{{ template "namenode-svc-1" . }}:8020</value>
      </property>
      <property>
        <name>dfs.namenode.shared.edits.dir</name>
        <value>qjournal://{{ template "journalnode-quorum" . }}/{{ include "hadoop.fullname" . }}-hdfs-nn</value>
      </property>
      <property>
        <name>dfs.ha.automatic-failover.enabled</name>
        <value>true</value>
      </property>
      <property>
        <name>dfs.ha.fencing.methods</name>
        <value>shell(/bin/true)</value>
      </property>
      <property>
        <name>dfs.journalnode.edits.dir</name>
        <value>/hadoop/dfs/journal</value>
      </property>
      <property>
        <name>dfs.client.failover.proxy.provider.{{ include "hadoop.fullname" . }}-hdfs-nn</name>
        <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
      </property>
    {{- end }}
      <property>
        <name>dfs.namenode.name.dir</name>
        <value>file:///hadoop/dfs/name</value>
      </property>
      <property>
        <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
        <value>false</value>
      </property>
      <property>
        <name>dfs.datanode.data.dir</name>
        <value>{{ template "datanode-data-dirs" . }}</value>
      </property>
      <property>
        <name>fs.getspaceused.jitterMillis</name>
        <value>3600000</value>
      </property>
      <property>
        <name>fs.du.interval</name>
        <value>86400000</value>
      </property>
      <property>
        <name>dfs.datanode.cached-dfsused.check.interval.ms</name>
        <value>86400000</value>
      </property>
      <property>
        <name>dfs.blocksize</name>
        <value>134217728</value>
      </property>
      <property>
        <name>dfs.client.socket-timeout</name>
        <value>90000</value>
      </property>
      <property>
        <name>dfs.client.slow.io.warning.threshold.ms</name>
        <value>90000</value>
      </property>
      <property>
        <name>dfs.namenode.handler.count</name>
        <value>64</value>
      </property>
      <property>
        <name>dfs.datanode.handler.count</name>
        <value>128</value>
      </property>
      <property>
        <name>dfs.datanode.max.transfer.threads</name>
        <value>32768</value>
      </property>
      <property>
        <name>dfs.datanode.slow.io.warning.threshold.ms</name>
        <value>1000</value>
      </property>
      <property>
        <name>dfs.heartbeat.interval</name>
        <value>5</value>
      </property>
      <property>
        <name>dfs.namenode.heartbeat.recheck-interval</name>
        <value>90000</value>
      </property>
      <property>
        <name>dfs.datanode.socket.write.timeout</name>
        <value>960000</value>
      </property>
      <property>
        <name>dfs.datanode.max.xcievers</name>
        <value>16000</value>
      </property>
      <property>
        <name>ipc.maximum.data.length</name>
        <value>201326592</value>
      </property>

      <!-- Impala: Mandatory: Block Location Tracking, https://impala.apache.org/docs/build/html/topics/impala_config_performance.html -->
      <property>
        <name>dfs.datanode.hdfs-blocks-metadata.enabled</name>
        <value>true</value>
      </property>
    </configuration>

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "uname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: '{{ template "uname" . }}'
spec:
  serviceName: {{ template "uname" . }}-headless
  selector:
    matchLabels:
      app: '{{ template "uname" . }}'
  replicas: {{ default .Values.replicas }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  {{- if not .Values.hostVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "uname" . }}
    spec:
{{ toYaml .Values.volumeClaimTemplate | indent 6 }}
  {{- end }}
  template:
    metadata:
      name: '{{ template "uname" . }}'
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: '{{ template "uname" . }}'
    spec:
      securityContext:
        fsGroup: {{ .Values.fsGroup }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if or (eq .Values.antiAffinity "hard") .Values.hostVolume.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - '{{ template "uname" .}}'
            topologyKey: {{ .Values.antiAffinityTopologyKey }}
      {{- else if eq .Values.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: {{ .Values.antiAffinityTopologyKey }}
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - '{{ template "uname" . }}'
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}

      {{- if or .Values.secretMounts .Values.hostVolume.enabled }}
      volumes:
        {{- if .Values.secretMounts }}
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .name }}
        {{- end }}
        {{- end }}

        {{- if .Values.hostVolume.enabled }}
        {{- range $index, $path := .Values.hostVolume.paths }}
        - name: es-volume-{{ $index }}
          hostPath:
            path: {{ $path }}
        {{- end }}
        {{- end }}
      {{- end }}

      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      containers:
      - name: "{{ template "name" . }}"
        securityContext:
{{ toYaml .Values.securityContext | indent 10 }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 10 }}
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                # If the node is starting up wait for the cluster to be green
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                http () {
                    local path="${1}"
                    if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                      BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                    else
                      BASIC_AUTH=''
                    fi
                    curl -XGET -s -k --fail ${BASIC_AUTH} {{ .Values.protocol }}://127.0.0.1:{{ .Values.httpPort }}${path}
                }

                if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    http "/"
                else
                    echo 'Waiting for elasticsearch cluster to become green'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" ; then
                        touch ${START_FILE}
                        exit 0
                    else
                        echo 'Cluster is not yet green'
                        exit 1
                    fi
                fi
        ports:
        - name: http
          containerPort: {{ .Values.httpPort }}
        - name: transport
          containerPort: {{ .Values.transportPort }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
          - /bin/bash
          - -c
          - |
            sysctl -w vm.max_map_count={{ .Values.sysctlVmMaxMapCount}};
            chmod -R g+rwx {{ template "data-paths-with-space" . }};
            chgrp 1000 {{ template "data-paths-with-space" . }};
            bash /usr/local/bin/docker-entrypoint.sh;
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: discovery.zen.ping.unicast.hosts
            value: "{{ .Values.masterService }}-headless"
          - name: cluster.name
            value: "{{ .Values.clusterName }}"
          - name: discovery.zen.minimum_master_nodes
            value: "{{ .Values.minimumMasterNodes }}"
          - name: network.host
            value: "{{ .Values.networkHost }}"
          - name: ES_JAVA_OPTS
            value: "{{ .Values.esJavaOpts }}"
          - name: node.master
            value: "{{ .Values.roles.master }}"
          - name: node.data
            value: "{{ .Values.roles.data }}"
          - name: node.ingest
            value: "{{ .Values.roles.ingest }}"
          - name: path.data
            value: '{{ template "data-paths" . }}'

{{- if .Values.extraEnvs }}
{{ toYaml .Values.extraEnvs | indent 10 }}
{{- end }}
        volumeMounts:
          {{- if .Values.hostVolume.enabled }}
            {{- range $index, $path := .Values.hostVolume.paths }}
            - name: es-volume-{{ $index }}
              mountPath: /usr/share/elasticsearch/data{{ $index }}
            {{- end }}
          {{- else }}
            - name: '{{ template "uname" . }}'
              mountPath: /usr/share/elasticsearch/data
          {{- end }}

          {{- range .Values.secretMounts }}
          - name: {{ .name }}
            mountPath: {{ .path }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
          {{- end }}
